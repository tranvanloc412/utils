[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aws-ops"
version = "2.0.0"
description = "AWS Operations Toolkit for Enterprise Cloud Management"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "DevOps Team", email = "devops@company.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Developers",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
]
keywords = ["aws", "cloud", "devops", "automation", "enterprise"]

# Essential dependencies only
dependencies = [
    "boto3>=1.26.0",
    "click>=8.0.0",
    "pyyaml>=6.0",
    "requests>=2.28.0",
    "python-dateutil>=2.8.0",
]

# Optional dependencies for enhanced features
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
]
logging = [
    "structlog>=22.0.0",
]
monitoring = [
    "prometheus-client>=0.15.0",
]

[project.urls]
Homepage = "https://github.com/company/aws-ops"
Documentation = "https://github.com/company/aws-ops/blob/main/README.md"
Repository = "https://github.com/company/aws-ops"
"Bug Tracker" = "https://github.com/company/aws-ops/issues"

# Console scripts for easy CLI access
[project.scripts]
aws-ops = "aws_ops.cli:cli"

# Package configuration
[tool.setuptools.packages.find]
where = ["src"]
include = ["aws_ops*"]

[tool.setuptools.package-data]
aws_ops = ["*.yml", "*.yaml", "*.json"]

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py312']
include = '\\.pyi?$'
extend-exclude = '''
(
  /(
      \\.eggs
    | \\.git
    | \\.hg
    | \\.mypy_cache
    | \\.tox
    | \\.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
